// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProductForm /> renders empty form with default props 1`] = `
<Fragment>
  <h1
    className="text-center m-3"
  >
    Product Info
  </h1>
  <form
    className="col-10 col-md-8 col-lg-7 col-xl-5 mx-auto"
    onSubmit={[Function]}
  >
    <Input
      error=""
      label="Title"
      name="title"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
          },
          "_label": "Title",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Image URL"
      name="imageURL"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
          },
          "_label": "Image URL",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <TextArea
      error=""
      label="Details"
      name="description"
      onChange={[Function]}
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Details",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Dropdown
      defaultText="Please choose..."
      error=""
      label="Category"
      labelClasses=""
      name="categoryId"
      onChange={[Function]}
      options={
        Array [
          Object {
            "id": "1",
            "name": "category1",
          },
          Object {
            "id": "2",
            "name": "category2",
          },
        ]
      }
      selectClasses="form-control"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_label": "Category",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
      wrapperClasses=""
    />
    <Input
      error=""
      label="Price, CURR1"
      name="currentCurrencyPrice"
      onChange={[Function]}
      type="text"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
          },
          "_label": "Price",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value={0}
    />
    <Input
      error=""
      label="Dicount, %"
      name="discount"
      onChange={[Function]}
      type="text"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
          },
          "_label": "Discount, %",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value={0}
    />
    <Input
      error=""
      label="Producer"
      name="producer"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
          },
          "_label": "Producer",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Rate"
      name="rate"
      onChange={[Function]}
      type="text"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Rate",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value={0}
    />
    <button
      className="btn btn-secondary w-100"
      disabled={
        Object {
          "categoryId": "Please choose category",
          "currentCurrencyPrice": "Price must be greater than 0",
          "description": "Details is a required field",
          "imageURL": "Image URL must be at least 5 characters",
          "producer": "Producer must be at least 5 characters",
          "title": "Title must be at least 3 characters",
        }
      }
      type="submit"
    >
      Save
    </button>
  </form>
</Fragment>
`;

exports[`<ProductForm /> renders not empty fields with product data provided 1`] = `
<Fragment>
  <h1
    className="text-center m-3"
  >
    Product Info
  </h1>
  <form
    className="col-10 col-md-8 col-lg-7 col-xl-5 mx-auto"
    onSubmit={[Function]}
  >
    <Input
      error=""
      label="Title"
      name="title"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
          },
          "_label": "Title",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="Mug 1"
    />
    <Input
      error=""
      label="Image URL"
      name="imageURL"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
          },
          "_label": "Image URL",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="#"
    />
    <TextArea
      error=""
      label="Details"
      name="description"
      onChange={[Function]}
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Details",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="product 1 description"
    />
    <Dropdown
      defaultText="Please choose..."
      error=""
      label="Category"
      labelClasses=""
      name="categoryId"
      onChange={[Function]}
      options={
        Array [
          Object {
            "id": "1",
            "name": "category1",
          },
          Object {
            "id": "2",
            "name": "category2",
          },
        ]
      }
      selectClasses="form-control"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "required": true,
          },
          "_label": "Category",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="2"
      wrapperClasses=""
    />
    <Input
      error=""
      label="Price, CURR1"
      name="currentCurrencyPrice"
      onChange={[Function]}
      type="text"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
          },
          "_label": "Price",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value={5}
    />
    <Input
      error=""
      label="Dicount, %"
      name="discount"
      onChange={[Function]}
      type="text"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
          },
          "_label": "Discount, %",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value={0}
    />
    <Input
      error=""
      label="Producer"
      name="producer"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "min": true,
            "required": true,
          },
          "_label": "Producer",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="test producer 1"
    />
    <Input
      error=""
      label="Rate"
      name="rate"
      onChange={[Function]}
      type="text"
      validationSchema={
        NumberSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Rate",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "number",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="5"
    />
    <button
      className="btn btn-secondary w-100"
      disabled={
        Object {
          "imageURL": "Image URL must be at least 5 characters",
        }
      }
      type="submit"
    >
      Save
    </button>
  </form>
</Fragment>
`;
