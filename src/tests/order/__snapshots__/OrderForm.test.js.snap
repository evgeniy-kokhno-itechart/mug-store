// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<OrderForm /> renders properly with currentUser provided 1`] = `
<Fragment>
  <h2
    className="order-form__message"
  >
    Please fill out the form to continue
  </h2>
  <form
    className="order-form__form"
    onSubmit={[Function]}
  >
    <Input
      error=""
      label="Name"
      name="name"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Name",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="test usename"
    />
    <Input
      error=""
      label="Country"
      name="country"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Country",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="test country"
    />
    <Input
      error=""
      label="City"
      name="city"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "City",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="test city"
    />
    <Input
      error=""
      label="Address"
      name="address"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Address",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="test address"
    />
    <Input
      error=""
      label="Phone"
      name="phone"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Phone",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="+000000000123"
    />
    <TextArea
      error=""
      label="Comment"
      name="comment"
      onChange={[Function]}
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Comment",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <button
      className="button button-solid orderform-button"
      disabled={null}
      type="submit"
    >
      Submit Order
    </button>
  </form>
</Fragment>
`;

exports[`<OrderForm /> renders properly with default props 1`] = `
<Fragment>
  <h2
    className="order-form__message"
  >
    Please fill out the form to continue
  </h2>
  <form
    className="order-form__form"
    onSubmit={[Function]}
  >
    <Input
      error=""
      label="Name"
      name="name"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Name",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Country"
      name="country"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Country",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="City"
      name="city"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "City",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Address"
      name="address"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Address",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Phone"
      name="phone"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Phone",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <TextArea
      error=""
      label="Comment"
      name="comment"
      onChange={[Function]}
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {},
          "_label": "Comment",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <button
      className="button button-solid orderform-button"
      disabled={
        Object {
          "address": "Address is a required field",
          "city": "City is a required field",
          "country": "Country is a required field",
          "name": "Name is a required field",
          "phone": "Phone must be at least 12 characters",
        }
      }
      type="submit"
    >
      Submit Order
    </button>
  </form>
</Fragment>
`;
