// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<ProfileForm /> renders properly with default props 1`] = `
<div
  className="profile-form"
>
  <h1
    className="profile-form__header"
  >
    Register
  </h1>
  <form
    className="profile-form__content"
    onSubmit={[Function]}
  >
    <Input
      error=""
      label="Username (a valid E-mail)"
      name="username"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
            "undefined": false,
          },
          "_label": "Username",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Name"
      name="name"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Name",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Country"
      name="country"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Country",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="City"
      name="city"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "City",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Address"
      name="address"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Address",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Phone"
      name="phone"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Phone",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Password"
      name="password"
      onChange={[Function]}
      type="password"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Password",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Confirm Password"
      matchedInput={
        Object {
          "name": "Password",
          "value": "",
        }
      }
      name="confirmPassword"
      onChange={[Function]}
      type="password"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Confirm Password",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <button
      className="button button--solid profile-form-button"
      disabled={
        Object {
          "address": "Address is a required field",
          "city": "City is a required field",
          "confirmPassword": "Confirm Password must be at least 5 characters",
          "country": "Country is a required field",
          "name": "Name is a required field",
          "password": "Password must be at least 5 characters",
          "phone": "Phone must be at least 12 characters",
          "username": "Username is a required field",
        }
      }
      type="submit"
    >
      Save
    </button>
  </form>
</div>
`;

exports[`<ProfileForm /> renders properly with user data provided 1`] = `
<div
  className="profile-form"
>
  <h1
    className="profile-form__header"
  >
    Edit profile
  </h1>
  <form
    className="profile-form__content"
    onSubmit={[Function]}
  >
    <Input
      error=""
      label="Username (a valid E-mail)"
      name="username"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
            "undefined": false,
          },
          "_label": "Username",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="user@user.com"
    />
    <Input
      error=""
      label="Name"
      name="name"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Name",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="Test user name"
    />
    <Input
      error=""
      label="Country"
      name="country"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Country",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="Test country"
    />
    <Input
      error=""
      label="City"
      name="city"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "City",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="Test city"
    />
    <Input
      error=""
      label="Address"
      name="address"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "required": true,
          },
          "_label": "Address",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="Test Adress"
    />
    <Input
      error=""
      label="Phone"
      name="phone"
      onChange={[Function]}
      type="text"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Phone",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value="+000000000000"
    />
    <Input
      error=""
      label="Password"
      name="password"
      onChange={[Function]}
      type="password"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Password",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <Input
      error=""
      label="Confirm Password"
      matchedInput={
        Object {
          "name": "Password",
          "value": "",
        }
      }
      name="confirmPassword"
      onChange={[Function]}
      type="password"
      validationSchema={
        StringSchema {
          "_blacklist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "_conditions": Array [],
          "_deps": Array [],
          "_exclusive": Object {
            "max": true,
            "min": true,
            "required": true,
          },
          "_label": "Confirm Password",
          "_mutate": undefined,
          "_options": Object {
            "abortEarly": true,
            "recursive": true,
          },
          "_type": "string",
          "_typeError": [Function],
          "_whitelist": RefSet {
            "list": Set {},
            "refs": Map {},
          },
          "tests": Array [
            [Function],
            [Function],
            [Function],
          ],
          "transforms": Array [
            [Function],
          ],
        }
      }
      value=""
    />
    <button
      className="button button--solid profile-form-button"
      disabled={
        Object {
          "confirmPassword": "Confirm Password must be at least 5 characters",
          "password": "Password must be at least 5 characters",
        }
      }
      type="submit"
    >
      Save
    </button>
  </form>
</div>
`;
